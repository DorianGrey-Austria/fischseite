name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true)

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js (for potential build steps)
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Dependencies (if package.json exists)
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          echo "No package.json found, skipping npm install"
        fi

    - name: Run Tests (if available)
      run: |
        if [ -f package.json ] && npm list playwright > /dev/null 2>&1; then
          echo "Running Playwright tests..."
          npm test
        else
          echo "No tests configured, skipping test step"
        fi

    - name: Prepare Deployment Files
      run: |
        # Create temporary deployment directory
        mkdir -p deployment_temp

        # Copy only production files to temp directory
        find . -maxdepth 1 -name "*.html" -exec cp {} deployment_temp/ \;
        find . -maxdepth 1 -name "*.js" -not -name "test-*" -exec cp {} deployment_temp/ \;
        find . -maxdepth 1 -name "*.css" -exec cp {} deployment_temp/ \;

        # Copy media directories
        [ -d "bilder" ] && cp -r bilder deployment_temp/ || echo "No bilder directory"
        [ -d "videos" ] && cp -r videos deployment_temp/ || echo "No videos directory"

        # List files that will be deployed
        echo "Files to be deployed from deployment_temp:"
        find deployment_temp/ -type f | sort

    - name: Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        server-dir: ${{ secrets.FTP_PATH }}
        local-dir: ./deployment_temp/
        dry-run: false
        log-level: verbose

    - name: Deployment Success Notification
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        echo "üåê Website updated: https://$(echo ${{ secrets.FTP_HOST }} | sed 's/ftp\.//')"

    - name: Deployment Failure Notification
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details."